server {

    access_log /dev/stdout;
    error_log /dev/stderr;

    listen 80;

    # Explicitly allow access to ca.crt without mTLS
    location = /ca.crt {
        root /www/cert; # Adjust this path to the directory where ca.crt is stored
    }

    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

map $ssl_client_s_dn $ssl_client_cn {
    "~CN=([^,]+)" $1; # Extract CN
    default "error extracting eipid";
}

server {
    resolver 8.8.8.8 valid=10s ipv6=off;

    access_log /dev/stdout;
    error_log /dev/stderr debug;

    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    http2 on;

    server_name localhost;

    ssl_certificate     /etc/nginx/certificate.pem;
    ssl_certificate_key /etc/nginx/key.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # This doesn't actually perform an ocsp check on the client cert,
    # it will only attempt to do an ocsp check on the self signed cert
    # in the ssl_certificate
    # ssl_ocsp on;
    ssl_verify_client on;
    ssl_verify_depth 4; # Allow intermediate CAs
    ssl_client_certificate /etc/nginx/ca.crt;

    add_header Strict-Transport-Security max-age=15768000;

    # Inform the proxied app which user had connected to this TLS endpoint
    add_header X-Subject-DN $ssl_client_s_dn;
    add_header X-Client-Verified $ssl_client_verify;
    add_header X-Client-CN $ssl_client_cn;

    root /www/data;

    # Capture client certificate errors as needed;
    # https://nginx.org/en/docs/http/ngx_http_ssl_module.html#errors
    error_page 495 496 497 = /error_no_cac.html;

    # Serve the custom error page for no client certificate
    location = /error_no_cac.html {
        root /www/errors;
        internal;
    }

    # Use an auth_request to check OCSP status
    # We don't use ssl_ocsp or ssl_stapling as this only relates
    # to the non-mTLS certs
    location = /ocsp-validate {
        internal;

        # Call a script to validate the client cert against an OCSP server
        proxy_pass http://ocsp.penryn.local:9000/;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Client-Cert $ssl_client_cert;
    }

    location = /cac-test {
        auth_request /ocsp-validate;

        auth_request_set $npke_upn $upstream_http_npke_upn;
        auth_request_set $auth_status $upstream_status;

        if ($auth_status = 200) {
            add_header Set-Cookie "session=valid; Max-Age=3600; Path=/; HttpOnly; Secure";
            # Directly serve the file for `/cac-test`
            return 200;
        }

        error_page 403 = @error403;

        root /www/data;
        index index.html;

        # Explicitly serve index.html for `/cac-test`
        try_files /index.html =404;
    }

    location / {
        auth_request /ocsp-validate;

        auth_request_set $auth_status $upstream_status;

        if ($auth_status = 200) {
            add_header Set-Cookie "session=valid; Max-Age=3600; Path=/; HttpOnly; Secure";
        }

        error_page 403 = @error403;

        autoindex on;
        ssi on;

        proxy_set_header ssl_client_cn $ssl_client_cn;
        proxy_pass http://${DOWNSTREAM_SERVICE};
    }

    location @error403 {
        return 403;
    }
}
